@import <Foundation/Foundation.j>
@import "Abstracts/SDRESTObject.j"

SDAttributeTypeBoolean = @"boolean"
SDAttributeTypeEnum    = @"enum"
SDAttributeTypeFloat   = @"float"
SDAttributeTypeInteger = @"integer"
SDAttributeTypeList    = @"list"
SDAttributeTypeObject  = @"object"
SDAttributeTypeString  = @"string"
SDAttributeTypeTime    = @"time"

SDAttributeFormatFree = @"free";
SDAttributeFormatEmail = @"email";
SDAttributeFormatPhoneNumber = @"phoneNumber";
SDAttributeFormatIPv4 = @"IPv4";
SDAttributeFormatIPv6 = @"IPv6";
SDAttributeFormatDate = @"date";


@implementation SDAttribute : SDRESTObject
{
    BOOL                _autogenerated  @accessors(property=autogenerated);
    BOOL                _creationOnly   @accessors(property=creationOnly);
    BOOL                _defaultOrder   @accessors(property=defaultOrder);
    BOOL                _deprecated     @accessors(property=deprecated);
    BOOL                _exposed        @accessors(property=exposed);
    BOOL                _filterable     @accessors(property=filterable);
    BOOL                _orderable      @accessors(property=orderable);
    BOOL                _readOnly       @accessors(property=readOnly);
    BOOL                _required       @accessors(property=required);
    BOOL                _transient      @accessors(property=transient);
    BOOL                _unique         @accessors(property=unique);
    CPArrayController   _allowedChoices @accessors(property=allowedChoices);
    // CPArrayController   _availability   @accessors(property=availability);
    CPNumber            _maxLength      @accessors(property=maxLength);
    CPNumber            _maxValue       @accessors(property=maxValue);
    CPNumber            _minLength      @accessors(property=minLength);
    CPNumber            _minValue       @accessors(property=minValue);
    CPString            _allowedChars   @accessors(property=allowedChars);
    CPString            _channel        @accessors(property=channel);
    CPString            _defaultValue   @accessors(property=defaultValue);
    CPString            _description    @accessors(property=description);
    CPString            _format         @accessors(property=format);
    CPString            _name           @accessors(property=name);
    CPString            _type           @accessors(property=type);
    CPString            _subtype        @accessors(property=subtype);
}


#pragma mark -
#pragma mark Initialization

+ (CPString)RESTName
{
    return @"attribute";
}

- (id)init
{
    if (self = [super init])
    {
        [self exposeLocalKeyPathToREST:@"autogenerated"];
        [self exposeLocalKeyPathToREST:@"creationOnly"];
        [self exposeLocalKeyPathToREST:@"defaultOrder"];
        [self exposeLocalKeyPathToREST:@"deprecated"];
        [self exposeLocalKeyPathToREST:@"exposed"];
        [self exposeLocalKeyPathToREST:@"filterable"];
        [self exposeLocalKeyPathToREST:@"orderable"];
        [self exposeLocalKeyPathToREST:@"readOnly"];
        [self exposeLocalKeyPathToREST:@"required"];
        [self exposeLocalKeyPathToREST:@"transient"];
        [self exposeLocalKeyPathToREST:@"unique"];
        [self exposeLocalKeyPathToREST:@"allowedChoices"];
        // [self exposeLocalKeyPathToREST:@"availability"];
        [self exposeLocalKeyPathToREST:@"maxLength"];
        [self exposeLocalKeyPathToREST:@"maxValue"];
        [self exposeLocalKeyPathToREST:@"minLength"];
        [self exposeLocalKeyPathToREST:@"minValue"];
        [self exposeLocalKeyPathToREST:@"allowedChars"];
        [self exposeLocalKeyPathToREST:@"channel"];
        [self exposeLocalKeyPathToREST:@"defaultValue"];
        [self exposeLocalKeyPathToREST:@"description"];
        [self exposeLocalKeyPathToREST:@"format"];
        [self exposeLocalKeyPathToREST:@"name"];
        [self exposeLocalKeyPathToREST:@"type"];
        [self exposeLocalKeyPathToREST:@"subtype"];

        _autogenerated = NO;
        _creationOnly = NO;
        _defaultOrder = NO;
        _deprecated = NO;
        _exposed = YES;
        _filterable = YES;
        _orderable = YES;
        _readOnly = NO;
        _required = NO;
        _transient = NO;
        _unique = NO;
        _type = SDAttributeTypeString
        _format = SDAttributeFormatFree;


        _allowedChoices = [[CPArrayController alloc] initWithContent:[]];
        // _availability = [[CPArrayController alloc] initWithContent:[]];
    }

    return self;
}

@end
