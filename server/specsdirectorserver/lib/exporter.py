import logging
import json

from monolithe.specifications import Specification, SpecificationAttribute, SpecificationAPI, RepositoryManager


class SDSpecificationExporter():
    """

    """

    def __init__(self, storage_controller, sdk):
        """
        """
        self._sdk = sdk
        self._storage_controller = storage_controller


    ## UTILITIES

    def export_specification(self, repository, specification):
        """
        """

        mono_spec = Specification(monolithe_config=None, filename=specification.name)

        mono_spec.description   = specification.description
        mono_spec.entity_name   = specification.entity_name
        mono_spec.package       = specification.package
        mono_spec.rest_name     = specification.object_rest_name
        mono_spec.resource_name = specification.object_resource_name
        mono_spec.allows_get    = specification.allows_get
        mono_spec.allows_update = specification.allows_update
        mono_spec.allows_create = specification.allows_create
        mono_spec.allows_delete = specification.allows_delete

        if specification.rest_name == self._sdk.SDSpecification.rest_name:
            abstracts, count = self._storage_controller.get_all(parent=specification, resource_name=self._sdk.SDAbstract.rest_name)
            mono_spec.extends = [abstract.name.replace(".spec", "") for abstract in abstracts]
            mono_spec.is_root = specification.root

        mono_spec.child_apis  = self._export_child_apis(specification=specification)
        mono_spec.attributes  = self._export_attributes(specification=specification)

        return mono_spec

    def export_apiinfo(self, repository):
        """
        """
        objects, count = self._storage_controller.get_all(parent=repository, resource_name=self._sdk.SDAPIInfo.rest_name, filter='parentID == %s' % repository.id)
        apiinfo = objects[0]

        return apiinfo


    ## PRIVATE

    def _export_child_apis(self, specification):
        """
        """
        ret = []
        child_apis, count = self._storage_controller.get_all(parent=specification, resource_name=self._sdk.SDChildAPI.rest_name)

        for child_api in child_apis:

            mono_child_api = SpecificationAPI(remote_specification_name=specification.name)
            remote_specification = self._storage_controller.get(resource_name=self._sdk.SDSpecification.rest_name, identifier=child_api.associated_specification_id)

            mono_child_api.remote_specification_name = remote_specification.object_rest_name
            mono_child_api.deprecated    = child_api.deprecated
            mono_child_api.relationship  = child_api.relationship
            mono_child_api.allows_get    = child_api.allows_get
            mono_child_api.allows_create = child_api.allows_create
            mono_child_api.allows_update = child_api.allows_update
            mono_child_api.allows_delete = child_api.allows_delete

            ret.append(mono_child_api)

        return ret

    def _export_attributes(self, specification):
        """
        """
        ret = []
        attributes, count = self._storage_controller.get_all(parent=specification, resource_name=self._sdk.SDAttribute.rest_name)

        for attribute in attributes:
            mono_attr = SpecificationAttribute(rest_name=attribute.name)

            mono_attr.description     = attribute.description
            mono_attr.rest_name     = attribute.name
            mono_attr.type            = attribute.type
            mono_attr.allowed_chars   = attribute.allowed_chars
            mono_attr.allowed_choices = attribute.allowed_choices
            mono_attr.autogenerated   = attribute.autogenerated
            mono_attr.availability    = attribute.availability
            mono_attr.creation_only   = attribute.creation_only
            mono_attr.default_order   = attribute.default_order
            mono_attr.default_value   = attribute.default_value
            mono_attr.deprecated      = attribute.deprecated
            mono_attr.filterable      = attribute.filterable
            mono_attr.format          = attribute.format
            mono_attr.max_length      = attribute.max_length
            mono_attr.max_value       = attribute.max_value
            mono_attr.min_length      = attribute.min_length
            mono_attr.min_value       = attribute.min_value
            mono_attr.orderable       = attribute.orderable
            mono_attr.readonly        = attribute.read_only
            mono_attr.required        = attribute.required
            mono_attr.unique          = attribute.unique
            mono_attr.unique_scope    = attribute.unique_scope

            ret.append(mono_attr)

        return ret